<?php

namespace Members\MembersBundle\Repository;

/**
 * AccountMemberRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AccountMemberRepository extends \Doctrine\ORM\EntityRepository {
    
   
    public function findGerantPasStation($gname, $role) {
        $ractif = "ROLE_GERANT_ACTIF";
        $qb = $this->_em->createQueryBuilder();
        $qb->select('u')
                ->from($this->_entityName, 'u')
                ->leftJoin('u.groups', 'g')
                ->where($qb->expr()->orX(
                                $qb->expr()->like('u.roles', ':roles'),
                        $qb->expr()->like('g.roles', ':roles')
                ))                
                ->andWhere($qb->expr()->notLike('u.roles', ':ractif'))
                ->andWhere("g.name = :gname")
                ->setParameter('roles', '%"' . $role . '"%')
                ->setParameter("gname", $gname)
                ->setParameter("ractif",'%"' . $ractif . '"%');
        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function findMarqueteurs() {
        $role = "ROLE_MARQUETEUR";
        $qb = $this->_em->createQueryBuilder();
        $qb->select('u')
                ->from($this->_entityName, 'u')
                ->leftJoin('u.groups', 'g')
                ->where($qb->expr()->orX(
                                $qb->expr()->like('u.roles', ':roles'), $qb->expr()->like('g.roles', ':roles')
                ))
                ->setParameter('roles', '%"' . $role . '"%');
        $query = $qb->getQuery();
        return $query->getResult();
    }
    
    public function findBySimpleOrAjax($gname, $role) {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('u')
                ->from($this->_entityName, 'u')
                ->leftJoin('u.groups', 'g')
                ->where($qb->expr()->orX(
                                $qb->expr()->like('u.roles', ':roles'), $qb->expr()->like('g.roles', ':roles')
                ))
                ->andWhere("g.name = :gname")
                ->setParameter('roles', '%"' . $role . '"%')
                ->setParameter("gname", $gname);
        $query = $qb->getQuery();
        return $query->getResult();
    }
    
    public function findGerantsByAjax($status,$gname, $gRole) {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('u')
                ->from($this->_entityName, 'u')
                ->leftJoin('u.groups', 'g')
                ->where($qb->expr()->orX(
                                $qb->expr()->like('u.roles', ':roles'), $qb->expr()->like('g.roles', ':roles')
                ))
                ->andWhere("u.status like :status")
                ->andWhere("g.name = :gname")
                ->setParameter('roles', '%"' . $gRole . '"%')
                ->setParameter("status", $status)
                ->setParameter("gname", $gname);
        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function findOneByRole($gname, $role) {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('u')
                ->from($this->_entityName, 'u')
                ->leftJoin('u.groups', 'g')
                ->where($qb->expr()->orX(
                                $qb->expr()->like('u.roles', ':roles'), $qb->expr()->like('g.roles', ':roles')
                ))
                ->andWhere("g.name = :gname")
                ->setParameter('roles', '%"' . $role . '"%')
                ->setParameter("gname", $gname);
        $query = $qb->getQuery();
        return $query->getSingleResult();
    }
    
    public function findSupervOfRespoOrGerants($hierachyArray, $status, $role) {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('u')
                ->from($this->_entityName, 'u')
                ->leftJoin('u.groups', 'g')
                ->where($qb->expr()->orX(
                                $qb->expr()->like('u.roles', ':roles'), $qb->expr()->like('g.roles', ':roles')
                ))
              //  ->andWhere($qb->expr()->in('u.id', ':arrayid'))
               ->andWhere("u.id in (:arrayid)")
                ->andWhere("u.status like :status")
                ->setParameter("status", $status)
                ->setParameter('roles', '%"' . $role . '"%')
                ->setParameter("arrayid", $hierachyArray);
        $query = $qb->getQuery();
        return $query->getResult();
    }

    
}
